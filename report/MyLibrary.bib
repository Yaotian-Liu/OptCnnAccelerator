@article{maOptimizingConvolutionOperation2018,
  title        = {Optimizing the {{Convolution Operation}} to {{Accelerate Deep Neural Networks}} on {{FPGA}}},
  author       = {Ma, Yufei and Cao, Yu and Vrudhula, Sarma and Seo, Jae-sun},
  date         = {2018-07},
  journaltitle = {IEEE Transactions on Very Large Scale Integration (VLSI) Systems},
  volume       = {26},
  number       = {7},
  pages        = {1354--1367},
  issn         = {1557-9999},
  doi          = {10.1109/TVLSI.2018.2815603},
  abstract     = {As convolution contributes most operations in convolutional neural network (CNN), the convolution acceleration scheme significantly affects the efficiency and performance of a hardware CNN accelerator. Convolution involves multiply and accumulate operations with four levels of loops, which results in a large design space. Prior works either employ limited loop optimization techniques, e.g., loop unrolling, tiling, and interchange, or only tune some of the design variables after the accelerator architecture and dataflow are already fixed. Without fully studying the convolution loop optimization before the hardware design phase, the resulting accelerator can hardly exploit the data reuse and manage data movement efficiently. This paper overcomes these barriers by quantitatively analyzing and optimizing the design objectives (e.g., memory access) of the CNN accelerator based on multiple design variables. Then, we propose a specific dataflow of hardware CNN acceleration to minimize the data communication while maximizing the resource utilization to achieve high performance. The proposed CNN acceleration scheme and architecture are demonstrated by implementing end-to-end CNNs including NiN, VGG-16, and ResNet-50/ResNet-152 for inference. For VGG-16 CNN, the overall throughputs achieve 348 GOPS and 715 GOPS on Intel Stratix V and Arria 10 FPGAs, respectively.},
  eventtitle   = {{{IEEE Transactions}} on {{Very Large Scale Integration}} ({{VLSI}}) {{Systems}}},
  keywords     = {Acceleration,Accelerator architectures,Computer architecture,Convolution,convolutional neural networks (CNNs),Field programmable gate arrays,field-programmable gate array (FPGA),Hardware,neural network hardware,Optimization,System-on-chip}
}

@misc{ioffeBatchNormalizationAccelerating2015,
  title         = {Batch {{Normalization}}: {{Accelerating Deep Network Training}} by {{Reducing Internal Covariate Shift}}},
  shorttitle    = {Batch {{Normalization}}},
  author        = {Ioffe, Sergey and Szegedy, Christian},
  date          = {2015-03-02},
  number        = {arXiv:1502.03167},
  eprint        = {1502.03167},
  eprinttype    = {arxiv},
  primaryclass  = {cs},
  publisher     = {{arXiv}},
  doi           = {10.48550/arXiv.1502.03167},
  url           = {http://arxiv.org/abs/1502.03167},
  urldate       = {2022-09-23},
  abstract      = {Training Deep Neural Networks is complicated by the fact that the distribution of each layer's inputs changes during training, as the parameters of the previous layers change. This slows down the training by requiring lower learning rates and careful parameter initialization, and makes it notoriously hard to train models with saturating nonlinearities. We refer to this phenomenon as internal covariate shift, and address the problem by normalizing layer inputs. Our method draws its strength from making normalization a part of the model architecture and performing the normalization for each training mini-batch. Batch Normalization allows us to use much higher learning rates and be less careful about initialization. It also acts as a regularizer, in some cases eliminating the need for Dropout. Applied to a state-of-the-art image classification model, Batch Normalization achieves the same accuracy with 14 times fewer training steps, and beats the original model by a significant margin. Using an ensemble of batch-normalized networks, we improve upon the best published result on ImageNet classification: reaching 4.9\% top-5 validation error (and 4.8\% test error), exceeding the accuracy of human raters.},
  archiveprefix = {arXiv},
  keywords      = {Computer Science - Machine Learning}
}

@book{DeepLearningForCV,
  author = {Adrian Rosebrock},
  title  = {Deep Learning for Computer Vision with Python},
  year   = {September 2017}
}